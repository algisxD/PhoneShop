@page "/planas/add"
@using PSAPI.Data.ViewModels
@using PSAPI.Data.Services
@using PSAPI.Data.Entities

@inject CommonService commonService
@inject NavigationManager navManager

<h1>Pridėti naują planą</h1>

<div class="@(newPlanas is null ? "spinner" : null)"></div>
@if (newPlanas is null)
{
    <p>Loading...</p>
}
else
{
    <div class="editinimo-dalykas">
        <div>
            <h3>Pavadinimas</h3>
            <input type="text" class="form-control" spellcheck="false" @bind-value="newPlanas.Pavadinimas" />
        </div>
        <div>
            <h3>Mėnesinis mokestis</h3>
            <input type="number" step="0.01" class="form-control" spellcheck="false" @bind-value="newPlanas.MenMokestis" />
        </div>
        <div>
            <h3>Galiojimo laikotarpis</h3>
            <input type="number" class="form-control" spellcheck="false" @bind-value="newPlanas.GaliojimoLaikas" />
        </div>
        <div>
            <button @onclick="addPlana" class="btn btn-info">Pridėti naują planą</button>
        </div>
    </div>

    if (showErrorMessage)
    {
        <div class="planasModal">
            <div class="modalheader">Klaida</div>
            <div class="modalcontent">Ne ne visi įvedimo laukai užpildyti...</div>
            <div class="modalfooter">
                <button @onclick="() => { showErrorMessage = false; }" class="btn btn-info">Gerai</button>
            </div>
        </div>
    }
}

@code {
    PlanasViewModel newPlanas;

    IEnumerable<TelefonoModelisViewModel> allTelefonoModeliai;

    bool showErrorMessage;   

    protected override async Task OnInitializedAsync()
    {
        newPlanas = new PlanasViewModel();

        allTelefonoModeliai = await commonService.GetTelefonoModeliaiAsync(navManager.BaseUri);


    }

    protected bool Validate()
    {
        if (string.IsNullOrEmpty(newPlanas.Pavadinimas) || 
            newPlanas.MenMokestis == 0 || 
            newPlanas.GaliojimoLaikas == 0)
            return false;

        return true;
    }

    protected async Task addPlana()
    {
        if (Validate())
        {
            await commonService.InsertPlanasAsync(navManager.BaseUri, FromViewModel());
            navManager.NavigateTo("/planai");
        }
        else
            showErrorMessage = true;
    }

    protected Planas FromViewModel()
    {
        return new Planas()
        {
            Id = newPlanas.Id,
            Pavadinimas = newPlanas.Pavadinimas,
            MenMokestis = newPlanas.MenMokestis,
            GaliojimoLaikas = newPlanas.GaliojimoLaikas
        };
    }
}
